@page "/"
@using VacationCalculator.ViewModels

<h1>Vacation Calculator</h1>
<EditForm Model=@vm OnValidSubmit="HandleValidSubmit">
    <h5>Current Values</h5>
    <label>
        Current Year Vacation <InputNumber @bind-Value=vm.CurrentYearVacation /> hours
    </label>
    <br />
    <label>
        Previous Year Vacation <InputNumber @bind-Value=vm.PreviousYearVacation /> hours
    </label>
    <br />
    <label>
        Floating Holidays <InputNumber @bind-Value=vm.FloatingHolidays /> days
    </label>
    <br />
    Years of Service:
    <label>
        <InputRadio name="yearsOfService" SelectedValue="1" @bind-Value="vm.YearsOfService" />1-9 Years
    </label>
    <label>
        <InputRadio name="yearsOfService" SelectedValue="2" @bind-Value="vm.YearsOfService" />10-19 Years
    </label>
    <label>
        <InputRadio name="yearsOfService" SelectedValue="3" @bind-Value="vm.YearsOfService" />20+ Years
    </label>
    <p>
        Accrual Rate (vacation hours/hour worked): @vm.AccrualRate.ToString("F2")
        <br />
        Cap: @vm.CapHours hours
    </p>

    <!-- <button type="submit">Submit</button> -->
    @if (vm.AccrualRate <= 0)
    {
        <p>Please select years of service to continue.</p>
    }
    else
    {
        <h5>Available balances:</h5>
        <p>
            Your available vacation is @vm.AvailableVacationHours/@vm.CapHours hours
        </p>
        <div>
            <RadzenProgressBar Value=@(Convert.ToInt32(vm.AvailableVacationHours/vm.CapHours * 100)) Style="margin-bottom: 20px; max-width:50%" />
        </div>
        <p>
            You will hit the vacation cap and stop accruing additional vacation time on <b>@vm.CapDate.ToString("d")</b> assuming constant accrual throughout the year. This isn't how it actually works most years because all vacation is earned by early November.
        </p>
        <p>
            With floating holidays, you have <b>@vm.AvailableVacationDaysWithFloating days</b> of PTO for vacation.
        </p>
        <p>
            It takes you @vm.DaysPerDay days to earn an additional vacation day.
        </p>
        <p>
            Your next <em>full day</em> of vacation will be completed on @vm.NextEarnedDayDate.ToString("d") once you earn @vm.HoursUntilNextFullDay hours.   
            <RadzenProgressBar Value=@((1-vm.HoursUntilNextFullDay / 8) * 100) Style="margin-bottom: 20px; max-width:50%" />
        </p>
        <h5>Next Vacation</h5>
        <p>
            <label>
                How many days do you need for your next vacation? <InputNumber @bind-Value=vm.DesiredDays /> days
            </label>
        </p>
        @if (vm.DesiredDays > 0)
        {
            @if (vm.NextVacationEarliestDate.Date == DateTime.Today)
            {
                <p>
                    You have enough vacation days for your vacation! 🥳✈️
                </p>
            }
            else
            {
                <p>
                    You will have enough vacation days for your next vacation on @vm.NextVacationEarliestDate.ToString("d")!
                </p>
                    @if (vm.NextVacationEarliestDate.Year > DateTime.Now.Year)
                    {
                        <p class="note-disclaimer">Note that this date is not in the current year. You get new floating holidays at the beginning of each year, and your vacation accrual rate will change if you cross a years-of-service boundary.</p>
                    }
            }
        }
    }
</EditForm>

@code
{
    VacationManagerViewModel vm = new VacationManagerViewModel();

    public void HandleValidSubmit()
    {
        // Calculate and show the new values
    }
}